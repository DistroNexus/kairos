name: Reusable workflow that runs provider tess

on:
  workflow_call:
    inputs:
      flavor:
        required: true
        type: string
      flavor_release:
        required: true
        type: string
      label:
        required: true
        type: string

permissions: read-all
jobs:
  test:
    runs-on: fast
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          fetch-depth: 0
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Enable KVM group perms
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev

          # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
          # echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          # sudo udevadm control --reload-rules
          # sudo udevadm trigger --name-match=kvm
          # sudo usermod -a -G kvm,libvirt $USER
          #
          # TODO: Switch back to the above solution when we switch to the github runners
          # https://askubuntu.com/a/1081326
          sudo setfacl -m u:runner:rwx /dev/kvm
      - name: Show network devices and bridges
        run: |
          ip a
          brctl show
      - name: Create and Show bridge
        run: |
          sudo ip link add br0 type bridge
          sudo ip address add dev br0 192.168.150.0/24
          ip a
          brctl show
          brctl show | awk 'NF>1 && NR>1 {print $1}' |grep -v docker|xargs
          sudo mkdir -p /etc/qemu/
          sudo echo "allow br0" > /etc/qemu/bridge.conf
          export BRIDGE_NETWORK=$(brctl show | awk 'NF>1 && NR>1 {print $1}' |grep -v docker|xargs)
          if [ "$BRIDGE_NETWORK" = "" ]; then exit 1;fi
      - name: Install earthly
        uses: Luet-lab/luet-install-action@cec77490c3f2416d7d07a47cfab04d448641d7ce # v1.1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - uses: robinraju/release-downloader@a96f54c1b5f5e09e47d9504526e96febd949d4c2 # v1.11
        with:
          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true
          #  kairos-opensuse-leap-15.6-standard-amd64-generic-v3.1.1-k3sv1.30.2+k3s1.iso
          fileName: 'kairos-${{ inputs.flavor }}-${{ inputs.flavor_release }}*standard-amd64-generic*k3sv1.30.2+k3s1.iso'
          out-file-path: ""
      - name: Install Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
      - name: Run tests
        env:
          USE_QEMU: true
          KVM: true
          MEMORY: 4000
          CPUS: 2
          DRIVE_SIZE: 30000
        run: |
          ls *.iso
          export ISO=$PWD/$(ls *.iso)
          echo "ISO is: $ISO"
          export BRIDGE_NETWORK=$(brctl show | awk 'NF>1 && NR>1 {print $1}' |grep -v docker|xargs)
          echo "BRIDGE_NETWORK is $BRIDGE_NETWORK"
          cp tests/go.* .
          sudo -E go run github.com/onsi/ginkgo/v2/ginkgo -v --label-filter "${{ inputs.label }}" --fail-fast -r ./tests/
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4
        if: failure()
        with:
          name: ${{ inputs.flavor }}-${{ inputs.flavor_release }}-${{ inputs.label }}-provider-test.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
